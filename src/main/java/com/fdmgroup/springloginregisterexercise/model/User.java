package com.fdmgroup.springloginregisterexercise.model;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jboss.logging.Logger;

/**
 * Represents a user created by the client during registration.
 * 
 * @author Brian.Albers
 * @version 1.0
 */
@Entity
@Table(name = "USERS")
public class User implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * Autogenerated user id
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "ID", updatable = false, nullable = false)
	private int id;
	/**
	 * String containing user's username
	 */
	@Column(name = "USERNAME")
	private String username;
	/**
	 * String containing user's password
	 */
	@Column(name = "PASSWORD")
	private String password;
	/**
	 * String containing user's first name
	 */
	@Column(name = "FIRST_NAME")
	private String firstName;
	/**
	 * String containing user's last name
	 */
	@Column(name = "LAST_NAME")
	private String lastName;
	/**
	 * String containing user's email
	 */
	@Column(name = "EMAIL")
	private String email;

	/**
	 * Default constructor.
	 */
	public User() {
		super();
	}

	/**
	 * Constructor that will set all Object parameters of User to parameters
	 * supplied by the client.
	 * 
	 * @param username
	 *            String containing a username supplied by a client. Must not be
	 *            null.
	 * @param password
	 *            String containing a password supplied by a client. Must not be
	 *            null.
	 * @param firstName
	 *            String containing a first name supplied by a client. Must not be
	 *            null.
	 * @param lastName
	 *            String containing a last name supplied by a client. Must not be
	 *            null.
	 * @param email
	 *            String containing a email supplied by a client. Must not be null.
	 */
	public User(String username, String password, String firstName, String lastName, String email) {
		this.username = username;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
	}

	/**
	 * Constructor that will be used to create a user object when a client attempts
	 * to login. Parameters are supplied by the user
	 * 
	 * @param username
	 *            String containing a username supplied by a client. Must not be
	 *            null.
	 * @param password
	 *            String containing a password supplied by a client. Must not be
	 *            null.
	 */
	public User(String username, String password) {
		this.username = username;
		this.password = password;
	}

	/**
	 * Gets the user object's id
	 * 
	 * @return This user's id
	 */
	public int getId() {
		return id;
	}

	/**
	 * Sets the user object's id
	 * 
	 * @param id
	 *            The autogenerated id
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Sets the user object's username
	 * 
	 * @return This user's username
	 */
	public String getUsername() {
		return username;
	}

	/**
	 * Changes the user object's username
	 * 
	 * @param username
	 *            The username supplied by the client
	 */
	public void setUsername(String username) {
		this.username = username;
	}

	/**
	 * Sets the user object's password
	 * 
	 * @return This user's password
	 */
	public String getPassword() {
		return password;
	}

	/**
	 * Changes the user object's password
	 * 
	 * @param password
	 *            The password supplied by the client
	 */
	public void setPassword(String password) {
		this.password = password;
	}

	/**
	 * @return This user's first name
	 */
	public String getFirstName() {
		return firstName;
	}

	/**
	 * @param firstName
	 *            The first name supplied by the client
	 */
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	/**
	 * @return This user's last name
	 */
	public String getLastName() {
		return lastName;
	}

	/**
	 * @param lastName
	 *            The last name supplied by the client
	 */
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	/**
	 * @return This user's email address
	 */
	public String getEmail() {
		return email;
	}

	/**
	 * @param email
	 *            The email supplied by the client
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		result = prime * result + ((firstName == null) ? 0 : firstName.hashCode());
		result = prime * result + id;
		result = prime * result + ((lastName == null) ? 0 : lastName.hashCode());
		result = prime * result + ((password == null) ? 0 : password.hashCode());
		result = prime * result + ((username == null) ? 0 : username.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		if (firstName == null) {
			if (other.firstName != null)
				return false;
		} else if (!firstName.equals(other.firstName))
			return false;
		if (id != other.id)
			return false;
		if (lastName == null) {
			if (other.lastName != null)
				return false;
		} else if (!lastName.equals(other.lastName))
			return false;
		if (password == null) {
			if (other.password != null)
				return false;
		} else if (!password.equals(other.password))
			return false;
		if (username == null) {
			if (other.username != null)
				return false;
		} else if (!username.equals(other.username))
			return false;
		return true;
	}
}
